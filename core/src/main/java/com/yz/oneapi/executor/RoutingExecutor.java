package com.yz.oneapi.executor;import com.yz.oneapi.config.OneApiConfig;import com.yz.oneapi.config.OneApiException;import com.yz.oneapi.interceptor.ColumnLogicDelete;import com.yz.oneapi.interceptor.ColumnTranslate;import com.yz.oneapi.interceptor.Interceptor;import com.yz.oneapi.model.ColumnModel;import com.yz.oneapi.model.ModelFacade;import com.yz.oneapi.model.TableModel;import com.yz.oneapi.orm.executor.SimpleExecutor;import com.yz.oneapi.orm.session.RowBounds;import com.yz.oneapi.parser.ParseException;import com.yz.oneapi.parser.QueryParser;import com.yz.oneapi.parser.ast.*;import com.yz.oneapi.parser.chain.ConditionChain;import com.yz.oneapi.parser.expr.InExpr;import com.yz.oneapi.parser.parser.ParserRegistry;import com.yz.oneapi.utils.OneApiUtil;import java.sql.SQLException;import java.util.*;import java.util.stream.Collectors;/** * { * "User":{ * "id":38710, * "name@|":"like %le%", * "createDate@":"between 2012-01-01 2012-03-01", * "type@": "in 1,2,3", * "@order":["name asc", "createDate desc"], * "@page": 0, * "@count": 3, * "userDetails[]":{ * "userId@":"/User/id" * } * }, * "moment":{ * "userId@": "currentUserId()" * }, * "roles":[{ * "name":'sdf', * "code":"sdf" * }] * } */public class RoutingExecutor {    private OneApiConfig oneApiConfig;    private ModelFacade modelFacade;    private Interceptor interceptor;    public RoutingExecutor(OneApiConfig oneApiConfig) {        this.oneApiConfig = oneApiConfig;        modelFacade = oneApiConfig.getModelFacade();        this.interceptor = oneApiConfig.getInterceptor();    }    public ResultWrapper execute(Map<String, Object> params) throws SQLException {        ResultWrapper resultWrapper = new ResultWrapper();        ResultWrapperHolder.set(new ResultWrapperHolder(resultWrapper));        try {            execute(params, resultWrapper);        }finally {            ResultWrapperHolder.remove();        }        return resultWrapper;    }    private void execute(Map<String, Object> params, ResultWrapper resultWrapper) throws SQLException {        for (String table : params.keySet()) {            Object value = params.get(table);            TableModel tableModel = modelFacade.getColumnModelsByModelName(table);            if (value instanceof Collection) {                List list = (List) value;                if (OneApiUtil.isEmpty(list)) {                    continue;                }                if (list.get(0) instanceof Map) {                    List<Map<String, Object>> data = (List<Map<String, Object>>) value;                    Map<String, Object> item = data.get(0);                    boolean isUpdate = item.keySet().stream().anyMatch(property -> isUpdateCondition(tableModel, property));                    if (isUpdate) {                        resultWrapper.add(table, update(tableModel, data));                    } else {                        resultWrapper.add(table, insert(tableModel, data));                    }                } else {                    resultWrapper.add(table, delete(tableModel, list));                }            } else if (value instanceof Map) {                Page page = nestedQuery(tableModel, (Map<String, Object>) value, null);                resultWrapper.add(table, page);            } else {                throw new ParseException("not support param");            }        }    }    private boolean isUpdateCondition(TableModel tableModel, String property) {        return tableModel.isPrimaryByProperty(property) || ParserRegistry.containSpecialToken(property);    }    private Integer update(TableModel tableModel, List<Map<String, Object>> data) throws SQLException {        SimpleExecutor executor = oneApiConfig.newExecutor();        int size = 0;        for (Map<String, Object> item : data) {            UpdateAst updateAst = new UpdateAst(tableModel, oneApiConfig);            Map<String, Object> where = new LinkedHashMap<>();            item.forEach((property, val) -> {                if (isUpdateCondition(tableModel, property)) {                    where.put(property, val);                } else {                    updateAst.append(tableModel.getColumnByProperty(property), val);                }            });            QueryParser queryParser = oneApiConfig.getQueryParser();            queryParser.parse(where, updateAst);            if (interceptor != null) {                interceptor.authority(updateAst);                if (!updateAst.access()) {                    throw new OneApiException("no permit to update table {}", tableModel.getTableName());                }            }            updateAst.build();            int update = executor.update(updateAst.getSqlStatement());            size += update;        }        return size;    }    private Integer delete(TableModel tableModel, List data) throws SQLException {        if (OneApiUtil.isNotEmpty(interceptor.logicDelete())) {            ColumnLogicDelete columnLogicDelete = interceptor.logicDelete().stream().filter(x -> x.isTable(tableModel.getModelName())).findFirst().orElse(null);            if (columnLogicDelete != null) {                ColumnModel columnByProperty = tableModel.getColumnByProperty(columnLogicDelete.getSource().getColumnAlias());                if (columnByProperty != null) {                    UpdateAst updateAst = new UpdateAst(tableModel, oneApiConfig);                    updateAst.append(columnByProperty, columnLogicDelete.getDeleteValue());                    primaryWhere(tableModel, updateAst, data);                    updateAst.build();                    if (interceptor != null) {                        interceptor.authority(updateAst);                        if (!updateAst.access()) {                            throw new OneApiException("no permit to delete table {}", tableModel.getTableName());                        }                    }                    SimpleExecutor executor = oneApiConfig.newExecutor();                    return executor.update(updateAst.getSqlStatement());                }            }        }        DeleteAst deleteAst = new DeleteAst(tableModel, oneApiConfig);        primaryWhere(tableModel, deleteAst, data);        if (interceptor != null) {            interceptor.authority(deleteAst);            if (!deleteAst.access()) {                throw new OneApiException("no permit to delete table {}", tableModel.getTableName());            }        }        deleteAst.build();        SimpleExecutor executor = oneApiConfig.newExecutor();        return executor.update(deleteAst.getSqlStatement());    }    private void primaryWhere(TableModel tableModel, WhereAst ast, List data) {        ConditionChain where = ast.getWhere();        ColumnModel primaryColumn = tableModel.getPrimaryColumn();        where.addLast(new InExpr(primaryColumn, data));    }    private Integer insert(TableModel tableModel, List<Map<String, Object>> data) throws SQLException {        //解析        InsertAst insertAst = new InsertAst(tableModel, oneApiConfig, data.size());        for (int i = 0; i < data.size(); i++) {            insertAst.append(data.get(i), i);        }        if (interceptor != null) {            interceptor.authority(insertAst);            if (!insertAst.access()) {                throw new OneApiException("no permit to insert table {}", tableModel.getTableName());            }        }        insertAst.build();        //执行        SimpleExecutor executor = oneApiConfig.newExecutor();        return executor.update(insertAst.getSqlStatement());    }    private Page nestedQuery(TableModel tableModel, Map<String, Object> conditions, List<Object> parentData) throws SQLException {        Map<String, Object> childParams = new HashMap<>();        Iterator<Map.Entry<String, Object>> iterator = conditions.entrySet().iterator();        while (iterator.hasNext()) {            Map.Entry<String, Object> next = iterator.next();            if (next.getValue() instanceof Map) {                childParams.put(next.getKey(), next.getValue());                iterator.remove();            }        }        //查询        Page page = query(tableModel, conditions);        //加入父节点的数据        ResultWrapperHolder result = ResultWrapperHolder.getResult();        result.addData(tableModel.getModelName(), page.getData());        ResultWrapperHolder.JoinOn joinParent = result.getJoinParent(tableModel.getModelName());        if (page.notEmpty() && OneApiUtil.isNotEmpty(parentData) && joinParent != null) {            if (page.isPage()) {                throw new ParseException("not support children table page");            }            Map<Object, List<Object>> joinGroup = page.getData().stream().collect(Collectors.groupingBy(x -> ((Map<String, Object>) x).get(joinParent.getLeftProperty())));            parentData.forEach((item) -> {                Map<String, Object> map = (Map<String, Object>) item;                map.put(tableModel.getModelName(), joinGroup.get(map.get(joinParent.getRightProperty())));            });        }        //子查询        childParams.forEach((table, param) -> {            try {                nestedQuery(modelFacade.getColumnModelsByModelName(table), (Map<String, Object>) param, page.getData());            } catch (SQLException e) {                throw new RuntimeException(e);            }        });        return page;    }    private Page query(TableModel tableModel, Map<String, Object> conditions) throws SQLException {        //解析        QueryParser queryParser = oneApiConfig.getQueryParser();        SelectAst selectAst = new SelectAst(tableModel, oneApiConfig);        queryParser.parse(conditions, selectAst);        if (interceptor != null) {            interceptor.authority(selectAst);            if (!selectAst.access()) {                throw new OneApiException("no permit to query table {}", tableModel.getTableName());            }        }        selectAst.build();        Page page = selectAst.getPage();        //执行        SimpleExecutor executor = oneApiConfig.newExecutor();        if (selectAst.getPage().isPage()) {            SelectAst totalAst = selectAst.totalAst().build();            List<Object> count = executor.query(totalAst.getTotalSqlStatement(), new RowBounds(), null);            page.setTotal((Long) count.get(0));            if (page.getTotal() <= 0) {                return page;            }        }        List<Object> query = executor.query(selectAst.getSqlStatement(), new RowBounds(), null);        translate(tableModel, query);        //包装        page.setData(query);        return page;    }    private void translate(TableModel tableModel, List<Object> query) {        if (OneApiUtil.isEmpty(query)                || oneApiConfig.getInterceptor() == null                || OneApiUtil.isEmpty(oneApiConfig.getInterceptor().translate())) {            return;        }        List<ColumnTranslate> translates = oneApiConfig.getInterceptor().translate();        List<ColumnTranslate> theTranslate = translates.stream().filter(x -> tableModel.getModelName().matches(x.getSource().getTableAliasRegex())).collect(Collectors.toList());        if (OneApiUtil.isNotEmpty(theTranslate)) {            for (ColumnTranslate translate : translates) {                ColumnModel source = tableModel.getColumnByProperty(translate.getSource().getColumnAlias());                if (source == null) {                    continue;                }                if (translate.getFunction() != null) {                    for (Object item : query) {                        ((Map) item).put(translate.getTarget(), translate.getFunction().apply(((Map) item).get(source.getAlias())));                    }                } else if (translate.getBatchFunction() != null) {                    Set<Object> sets = new LinkedHashSet<>(query.size());                    int[] setIndex = new int[query.size()];                    Map<Object, Integer> val2SetIndex = new HashMap<>();                    //query的类型为ArrayList                    //如果val的值为1,2,3,4,1,2setIndex为query对应的sets里的索引 0,1,2,3,0,1                    for (int i = 0; i < query.size(); i++) {                        Object item = query.get(i);                        Object val = ((Map) item).get(source.getAlias());                        boolean add = sets.add(val);                        if (add) {                            setIndex[i] = i == 0 ? 0 : sets.size() - 1;                            val2SetIndex.put(val, setIndex[i]);                        } else {                            setIndex[i] = val2SetIndex.get(val);                        }                    }                    List<Object> apply = translate.getBatchFunction().apply(sets);                    for (int i = 0; i < query.size(); i++) {                        Object item = query.get(i);                        ((Map) item).put(translate.getTarget(), apply.get(setIndex[i]));                    }                }            }        }    }}